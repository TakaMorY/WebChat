import { defineStore } from 'pinia';

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,
    isAuthenticated: false,
    isLoading: false,
    lastAuthCheck: null
  }),

  getters: {
    // –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fullName: (state) => {
      if (!state.user) return ''
      if (state.user.name && state.user.secondname) {
        return `${state.user.name} ${state.user.secondname}`
      }
      return state.user.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    },

    // –ò–Ω–∏—Ü–∏–∞–ª—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
    initials: (state) => {
      if (!state.user) return 'U'
      if (state.user.name && state.user.secondname) {
        return `${state.user.name[0]}${state.user.secondname[0]}`.toUpperCase()
      }
      return state.user.email?.[0]?.toUpperCase() || 'U'
    },

    // URL –∞–≤–∞—Ç–∞—Ä–∞
    avatarUrl: (state) => state.user?.avatar_url || null
  },

  actions: {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ localStorage
     */
    initialize() {
      if (process.client && !this.isLoading) {
        this.isLoading = true

        try {
          const authData = localStorage.getItem('authData')

          if (authData) {
            const { user, isAuthenticated, timestamp } = JSON.parse(authData)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (24 —á–∞—Å–∞)
            const isExpired = Date.now() - timestamp > 24 * 60 * 60 * 1000

            if (!isExpired && user && isAuthenticated) {
              this.user = user
              this.isAuthenticated = isAuthenticated
              this.lastAuthCheck = timestamp
              console.log('üîÑ Auth state restored from localStorage')
            } else {
              console.log('üîÑ Auth data expired or invalid, clearing...')
              this.clearAuthData()
            }
          }
        } catch (error) {
          console.error('‚ùå Error initializing auth:', error)
          this.clearAuthData()
        } finally {
          this.isLoading = false
        }
      }
    },

    /**
     * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
     */
    async login(credentials) {
      if (this.isLoading) {
        throw new Error('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
      }

      this.isLoading = true

      try {
        const response = await $fetch('/api/users/login', {
          method: 'POST',
          body: credentials,
          timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        })

        if (response.success && response.user) {
          this.user = response.user
          this.isAuthenticated = true
          this.lastAuthCheck = Date.now()

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
          if (process.client) {
            localStorage.setItem('authData', JSON.stringify({
              user: response.user,
              isAuthenticated: true,
              timestamp: this.lastAuthCheck
            }))
          }

          console.log('‚úÖ Login successful in store')
          return true
        } else {
          throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ')
        }
      } catch (error) {
        console.error('‚ùå Login failed in store:', error)

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.clearAuthData()

        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
        if (error.data?.statusMessage) {
          throw new Error(error.data.statusMessage)
        } else if (error.message) {
          throw new Error(error.message)
        } else {
          throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
        }
      } finally {
        this.isLoading = false
      }
    },

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    async logout() {
      this.isLoading = true

      try {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.user = null
        this.isAuthenticated = false
        this.lastAuthCheck = null

        // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if (process.client) {
          localStorage.removeItem('authData')
          sessionStorage.clear()

          // –û—á–∏—â–∞–µ–º cookies –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          this.clearAuthCookies()
        }

        console.log('‚úÖ Logout successful')

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (process.client) {
          window.location.href = '/'
        }

      } catch (error) {
        console.error('‚ùå Logout error:', error)
        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.clearAuthData()

        if (process.client) {
          window.location.href = '/'
        }
      } finally {
        this.isLoading = false
      }
    },

    /**
     * –û—á–∏—Å—Ç–∫–∞ cookies –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    clearAuthCookies() {
      if (process.client) {
        const cookies = document.cookie.split(';')
        for (let cookie of cookies) {
          const eqPos = cookie.indexOf('=')
          const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim()

          if (name.includes('auth') || name.includes('token') || name.includes('session')) {
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`
          }
        }
      }
    },

    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    clearAuthData() {
      this.user = null
      this.isAuthenticated = false
      this.lastAuthCheck = null

      if (process.client) {
        localStorage.removeItem('authData')
        this.clearAuthCookies()
      }
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateUser(userData) {
      if (this.user) {
        this.user = { ...this.user, ...userData }

        // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
        if (process.client && this.isAuthenticated) {
          const authData = localStorage.getItem('authData')
          if (authData) {
            const data = JSON.parse(authData)
            data.user = { ...data.user, ...userData }
            localStorage.setItem('authData', JSON.stringify(data))
          }
        }
      }
    }
  }
})