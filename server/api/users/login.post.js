import { supabase } from '~/server/utils/supabase'

export default defineEventHandler(async (event) => {
  const startTime = Date.now()

  try {
    const body = await readBody(event)
    const { email, password } = body

    console.log(`üîê Login attempt for: ${email}`)

    // –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email?.includes('@') || !password) {
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      })
    }

    const hashedPassword = Buffer.from(password).toString('base64')

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    const { data: user, error } = await supabase
      .from('users')
      .select('id, email, name, secondname, password, avatar_url, created_at')
      .eq('email', email)
      .single()

    const queryTime = Date.now() - startTime
    console.log(`‚ö° Supabase query time: ${queryTime}ms`)

    if (error || !user) {
      throw createError({
        statusCode: 401,
        statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      })
    }

    if (user.password !== hashedPassword) {
      throw createError({
        statusCode: 401,
        statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      })
    }

    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª—å
    const { password: _, ...userWithoutPassword } = user

    console.log(`‚úÖ Login successful in ${Date.now() - startTime}ms`)
    return userWithoutPassword

  } catch (error) {
    console.error(`‚ùå Login failed in ${Date.now() - startTime}ms:`, error)
    throw createError({
      statusCode: error.statusCode || 500,
      statusMessage: error.data?.statusMessage || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})