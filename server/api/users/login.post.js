import { supabase } from '~/server/utils/supabase'

export default defineEventHandler(async (event) => {
  console.log('üîë Login API called')

  try {
    const body = await readBody(event)
    const { email, password } = body

    console.log('üìß Login attempt for:', email)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      console.log('‚ùå Missing credentials')
      throw createError({
        statusCode: 400,
        statusMessage: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      console.log('‚ùå Invalid email format')
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      console.log('‚ùå Password too short')
      throw createError({
        statusCode: 400,
        statusMessage: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
      })
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    console.log('üîç Searching user in database...')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', email.trim().toLowerCase())
      .single()

    if (userError) {
      console.log('‚ùå Database error:', userError)

      if (userError.code === 'PGRST116') {
        throw createError({
          statusCode: 401,
          statusMessage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }

      throw createError({
        statusCode: 500,
        statusMessage: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
      })
    }

    if (!user) {
      console.log('‚ùå User not found')
      throw createError({
        statusCode: 401,
        statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      })
    }

    console.log('‚úÖ User found:', user.email)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ –∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    const hashedPassword = Buffer.from(password).toString('base64')
    console.log('üîë Password verification:', {
      stored: user.password?.substring(0, 10) + '...',
      provided: hashedPassword.substring(0, 10) + '...'
    })

    if (user.password !== hashedPassword) {
      console.log('‚ùå Password mismatch')
      throw createError({
        statusCode: 401,
        statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    const { error: updateError } = await supabase
      .from('users')
      .update({ last_login: new Date().toISOString() })
      .eq('id', user.id)

    if (updateError) {
      console.log('‚ö†Ô∏è Failed to update last login:', updateError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥ –∏–∑-–∑–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–∏
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å)
    const { password: _, ...userWithoutPassword } = user

    console.log('‚úÖ Login successful for:', user.email)

    return {
      success: true,
      user: userWithoutPassword,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    }

  } catch (error) {
    console.error('üí• Login process failed:', error)

    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –Ω–∞—à–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (error.statusCode) {
      throw error
    }

    // –î–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    throw createError({
      statusCode: 500,
      statusMessage: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    })
  }
})