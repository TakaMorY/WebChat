import { supabase } from '~/server/utils/supabase'

export default defineEventHandler(async (event) => {
  console.log('üîë Login API called')

  try {
    const body = await readBody(event)
    const { email, password } = body

    console.log('üìß Login attempt for:', email)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!email || !password) {
      console.log('‚ùå Missing email or password')
      throw createError({
        statusCode: 400,
        statusMessage: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      console.log('‚ùå Invalid email format:', email)
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
      })
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–¢–ê–ö –ñ–ï –ö–ê–ö –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò!)
    const hashedPassword = Buffer.from(password).toString('base64')
    console.log('üîë Password hashed for comparison')

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    console.log('üîç Searching user in Supabase...')
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single()

    console.log('üìä Supabase response:', {
      userFound: !!user,
      error: error?.message,
      userEmail: user?.email
    })

    if (error) {
      console.log('‚ùå Supabase search error:', error)

      if (error.code === 'PGRST116') { // Not found
        throw createError({
          statusCode: 401,
          statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
        })
      }

      throw createError({
        statusCode: 500,
        statusMessage: `–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`
      })
    }

    if (!user) {
      console.log('‚ùå User not found for email:', email)
      throw createError({
        statusCode: 401,
        statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      })
    }

    console.log('üîë Comparing passwords...')
    console.log('   Stored hash:', user.password)
    console.log('   Input hash:', hashedPassword)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if (user.password !== hashedPassword) {
      console.log('‚ùå Password mismatch')
      throw createError({
        statusCode: 401,
        statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      })
    }

    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª—å
    const { password: _, ...userWithoutPassword } = user
    console.log('‚úÖ Login successful for:', user.email)

    return userWithoutPassword

  } catch (error) {
    console.error('üí• Login error:', error)
    throw createError({
      statusCode: error.statusCode || 500,
      statusMessage: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
    })
  }
})